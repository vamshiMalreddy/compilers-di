
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\005\004\000\002\005\002" +
    "\000\002\004\011\000\002\004\010\000\002\006\006\000" +
    "\002\006\005\000\002\007\003\000\002\007\005\000\002" +
    "\010\003\000\002\010\005\000\002\012\003\000\002\013" +
    "\003\000\002\013\006\000\002\013\005\000\002\013\003" +
    "\000\002\014\003\000\002\014\002\000\002\015\003\000" +
    "\002\020\011\000\002\016\004\000\002\016\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\003\000\002\017\005\000\002\017\004\000\002\017\002" +
    "\000\002\011\003\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\006\002\ufffc\004\006\001\002\000\004\002" +
    "\104\001\002\000\006\002\ufffc\004\077\001\002\000\004" +
    "\006\013\001\002\000\006\002\ufffc\004\006\001\002\000" +
    "\004\002\001\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\uffff\001\002\000\012\004\024\005\017\007\023\016" +
    "\020\001\002\000\006\007\ufff7\015\ufff7\001\002\000\006" +
    "\007\ufff5\015\ufff5\001\002\000\006\007\071\015\070\001" +
    "\002\000\006\007\ufff2\015\ufff2\001\002\000\004\006\062" +
    "\001\002\000\006\007\uffef\015\uffef\001\002\000\006\007" +
    "\060\015\057\001\002\000\010\002\ufff8\004\ufff8\010\052" +
    "\001\002\000\010\006\025\007\ufff3\015\ufff3\001\002\000" +
    "\012\004\027\005\031\007\026\016\020\001\002\000\006" +
    "\007\ufff0\015\ufff0\001\002\000\022\006\043\007\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2\001\002" +
    "\000\020\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\017\uffe5\001\002\000\020\007\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\017\uffe9\001\002\000\012\007" +
    "\034\012\036\013\035\014\033\001\002\000\010\004\027" +
    "\005\031\016\020\001\002\000\006\007\ufff1\015\ufff1\001" +
    "\002\000\010\004\027\005\031\016\020\001\002\000\010" +
    "\004\027\005\031\016\020\001\002\000\020\007\uffe6\011" +
    "\uffe6\012\uffe6\013\035\014\033\015\uffe6\017\uffe6\001\002" +
    "\000\020\007\uffe8\011\uffe8\012\uffe8\013\uffe8\014\033\015" +
    "\uffe8\017\uffe8\001\002\000\020\007\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\017\uffe7\001\002\000\020\007" +
    "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\017\uffea" +
    "\001\002\000\012\004\027\005\031\007\044\016\020\001" +
    "\002\000\020\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\017\uffe3\001\002\000\006\007\050\015\047\001" +
    "\002\000\014\007\uffe1\012\036\013\035\014\033\015\uffe1" +
    "\001\002\000\010\004\027\005\031\016\020\001\002\000" +
    "\020\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\017\uffe4\001\002\000\014\007\uffe0\012\036\013\035\014" +
    "\033\015\uffe0\001\002\000\012\004\027\005\031\011\uffed" +
    "\016\020\001\002\000\004\011\uffee\001\002\000\004\011" +
    "\056\001\002\000\012\011\uffec\012\036\013\035\014\033" +
    "\001\002\000\006\002\ufffa\004\ufffa\001\002\000\010\004" +
    "\027\005\031\016\020\001\002\000\006\002\ufff9\004\ufff9" +
    "\001\002\000\014\007\ufff4\012\036\013\035\014\033\015" +
    "\ufff4\001\002\000\010\004\027\005\031\016\020\001\002" +
    "\000\012\007\064\012\036\013\035\014\033\001\002\000" +
    "\010\004\027\005\031\016\020\001\002\000\012\012\036" +
    "\013\035\014\033\017\066\001\002\000\010\004\027\005" +
    "\031\016\020\001\002\000\020\007\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\017\uffeb\001\002\000\004\004" +
    "\076\001\002\000\004\010\072\001\002\000\012\004\027" +
    "\005\031\011\uffed\016\020\001\002\000\004\011\074\001" +
    "\002\000\006\002\ufffb\004\ufffb\001\002\000\006\007\ufff6" +
    "\015\ufff6\001\002\000\006\007\ufff3\015\ufff3\001\002\000" +
    "\004\006\101\001\002\000\004\002\ufffd\001\002\000\012" +
    "\004\103\005\017\007\102\016\020\001\002\000\006\002" +
    "\ufff8\004\ufff8\001\002\000\004\006\025\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\014\002\003\003\007\004\006\005\010\006" +
    "\004\001\001\000\002\001\001\000\006\005\077\006\004" +
    "\001\001\000\002\001\001\000\012\003\011\004\006\005" +
    "\010\006\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\015\010\021\012\013\013" +
    "\014\020\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\031\020\027\001\001\000\002\001" +
    "\001\000\004\017\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\040\020\027\001" +
    "\001\000\002\001\001\000\006\016\037\020\027\001\001" +
    "\000\006\016\036\020\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\044\016\045\020\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\050\020\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\053\015\052\016\054\020\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\060\020\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\062\020\027\001\001\000\002\001" +
    "\001\000\006\016\064\020\027\001\001\000\002\001\001" +
    "\000\006\016\066\020\027\001\001\000\002\001\001\000" +
    "\004\012\074\001\001\000\002\001\001\000\012\014\072" +
    "\015\052\016\054\020\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\021\013\014\020" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= func_declarations 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 try { File file = new File("out/Main.java");
                                                                                   if(!file.exists()){file.createNewFile();}
                                                                                   FileWriter fw = new FileWriter(file,true);
                                                                                   BufferedWriter bw = new BufferedWriter(fw);
                                                                                   PrintWriter pw = new PrintWriter(bw);
                                                                                   pw.println("}");
                                                                                   pw.close(); }
                                                                                   catch (Exception ex) {
                                                                                   System.out.println("something went really bad..."); }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // func_declarations ::= func_declare func_declarations 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 try { File file = new File("out/Main.java");
                                                                                   if(!file.exists()){file.createNewFile();}
                                                                                   FileWriter fw = new FileWriter(file,true);
                                                                                   BufferedWriter bw = new BufferedWriter(fw);
                                                                                   PrintWriter pw = new PrintWriter(bw);
                                                                                   pw.println(decl);
                                                                                   pw.close(); }
                                                                                   catch (Exception ex) {
                                                                                   System.out.println("something went really bad..."); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // func_declarations ::= func_calls 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 try { File file = new File("out/Main.java");
                                                                                   if(!file.exists()){file.createNewFile();}
                                                                                   FileWriter fw = new FileWriter(file,false);
                                                                                   BufferedWriter bw = new BufferedWriter(fw);
                                                                                   PrintWriter pw = new PrintWriter(bw); pw.println("public class Main {\n\tpublic static void main(String[] args) {\n" + fc + "\t}");
                                                                                   pw.close(); }
                                                                                   catch (Exception ex) {
                                                                                   System.out.println("something went really bad..."); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // func_calls ::= func_call func_calls 
            {
              Object RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object call = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = call + "\n" + fc ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_calls",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // func_calls ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_calls",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_declare ::= IDENTIFIER LPAREN func_param_list_decl RPAREN LCURLYBRACKET func_body RCURLYBRACKET 
            {
              Object RESULT =null;
		int func_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int func_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object func_id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int parlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int parlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object parlist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "\n\tpublic static String " + func_id + "(" + parlist + ") {\n" + body + "\n\t}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declare",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func_declare ::= IDENTIFIER LPAREN RPAREN LCURLYBRACKET func_body RCURLYBRACKET 
            {
              Object RESULT =null;
		int func_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int func_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object func_id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "\n\tpublic static String " + func_id + "() {\n" + body + "\n\t}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declare",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_call ::= IDENTIFIER LPAREN func_param_list_call RPAREN 
            {
              Object RESULT =null;
		int func_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int func_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object func_id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object parlist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "\t\tSystem.out.println(" + func_id + "(" + parlist + "));"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_call ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;
		int func_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int func_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object func_id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "\t\tSystem.out.println(" + func_id + "());"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_param_list_decl ::= parameter_decl 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = par; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_param_list_decl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func_param_list_decl ::= func_param_list_decl COMMA parameter_decl 
            {
              Object RESULT =null;
		int parlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object parlist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parlist + ", " + par; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_param_list_decl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func_param_list_call ::= parameter_call 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = par; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_param_list_call",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // func_param_list_call ::= func_param_list_call COMMA expression 
            {
              Object RESULT =null;
		int parlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object parlist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parlist + ", " + par; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_param_list_call",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameter_decl ::= IDENTIFIER 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "String " + param; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_decl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameter_call ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = str; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_call",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parameter_call ::= IDENTIFIER LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int func_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int func_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object func_id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func_id + "("+ st +")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_call",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameter_call ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;
		int func_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int func_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object func_id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = func_id + "()"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_call",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parameter_call ::= if_with_exprs 
            {
              Object RESULT =null;
		int if_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int if_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object if_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = if_expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_call",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // func_body ::= statements 
            {
              Object RESULT =null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stmts = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "\t\t" + stmts; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_body",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // func_body ::= 
            {
              Object RESULT =null;
		 RESULT = "\t\treturn null;"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_body",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statements ::= expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "return " + expr + ";"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // if_with_exprs ::= IF LPAREN expression RPAREN expression ELSE expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expr3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "(" + expr1 + ") ? " + expr2 + " : " + expr3 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_with_exprs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= IDENTIFIER rest_idntf 
            {
              Object RESULT =null;
		int idntfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idntfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idntf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int id_rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id_r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = idntf + "" + id_r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = str; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression EQUALS expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr1 + ".equals("+expr2+")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression IN expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr2 + ".contains("+expr1+")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr1 +" + "+ expr2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= if_with_exprs 
            {
              Object RESULT =null;
		int if_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int if_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object if_expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = if_expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rest_idntf ::= LPAREN func_param_list_inner RPAREN 
            {
              Object RESULT =null;
		int parlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object parlist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "(" + parlist + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_idntf",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rest_idntf ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = "()"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_idntf",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rest_idntf ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rest_idntf",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // func_param_list_inner ::= expression 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = par; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_param_list_inner",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // func_param_list_inner ::= func_param_list_inner COMMA expression 
            {
              Object RESULT =null;
		int parlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object parlist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parlist + ", " + par; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_param_list_inner",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
