/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;
import java.io.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal    IDENTIFIER, STRING_LITERAL;
terminal    LPAREN, RPAREN, LCURLYBRACKET, RCURLYBRACKET;
terminal    PLUS, EQUALS, IN, COMMA, IF, ELSE;

/*  Non terminals */
non terminal    program, func_declarations, func_declare, func_param_list_call;
non terminal    func_name, func_param_list_decl, func_block;
non terminal    parameter_decl,parameter_call, func_calls, func_call;
non terminal    func_arguments, func_argument;
non terminal    func_param_list_inner, func_call_inner, fun_params_inner, parameter_inner;
non terminal    func_body, statements, statement, expression, empty_param_list, rest_idntf;

/**
 *  Precedence Declarations
 */
precedence left PLUS;
precedence left EQUALS;
precedence left IN;
precedence left LPAREN, COMMA, RPAREN;

/**
 *  The Grammar Rules
 */
//TODO add exceptions for the file
program                  ::= func_declarations:fd                               {: File file = new File("out/Main.java");
                                                                                   if(!file.exists()){file.createNewFile();}
                                                                                   FileWriter fw = new FileWriter(file,true);
                                                                                   BufferedWriter bw = new BufferedWriter(fw);
                                                                                   PrintWriter pw = new PrintWriter(bw);
                                                                                   pw.println("}");
                                                                                   pw.close(); :}
;

func_declarations       ::= func_declare:decl func_declarations:fd              {: File file = new File("out/Main.java");
                                                                                   if(!file.exists()){file.createNewFile();}
                                                                                   FileWriter fw = new FileWriter(file,true);
                                                                                   BufferedWriter bw = new BufferedWriter(fw);
                                                                                   PrintWriter pw = new PrintWriter(bw);
                                                                                   pw.println(decl);
                                                                                   pw.close(); :}
                        | func_calls:fc                                         {: File file = new File("out/Main.java");
                                                                                   if(!file.exists()){file.createNewFile();}
                                                                                   FileWriter fw = new FileWriter(file,false);
                                                                                   BufferedWriter bw = new BufferedWriter(fw);
                                                                                   PrintWriter pw = new PrintWriter(bw); pw.println("public class Main {\n\tpublic static void main(String[] args) {\n" + fc + "\t}");
                                                                                   pw.close(); :}
;

func_calls              ::= func_call:call func_calls:fc                        {: RESULT = call + "\n" + fc ; :}
                        | /* Empty */                                           {: RESULT = ""; :}
;

func_declare            ::= IDENTIFIER:func_id LPAREN func_param_list_decl:parlist RPAREN LCURLYBRACKET func_body:body RCURLYBRACKET
                                                                                {: RESULT = "\n\tpublic static String " + func_id + " (" + parlist + ") {\n" + body + "\n\t}"; :}
                        | IDENTIFIER:func_id LPAREN RPAREN LCURLYBRACKET func_body:body RCURLYBRACKET{: RESULT = "\n\tpublic static String" + func_id + "()); {\n" + body + "\n\t}"; :}
;

func_call               ::= IDENTIFIER:func_id LPAREN func_param_list_call:parlist RPAREN
                                                                                {: RESULT = "\t\tSystem.out.println(" + func_id + "(" + parlist + "));"; :}
                        | IDENTIFIER:func_id LPAREN RPAREN                      {: RESULT = "\t\tSystem.out.println(" + func_id + "());"; :}
;

func_param_list_decl    ::= parameter_decl:par                                  {: RESULT = par; :}
                        | func_param_list_decl:parlist COMMA parameter_decl:par {: RESULT = parlist + ", " + par; :}
;

func_param_list_call    ::= parameter_call:par                                  {: RESULT = par; :}
                        | func_param_list_call:parlist COMMA parameter_call:par {: RESULT = parlist + ", " + par; :}
;

parameter_decl          ::= IDENTIFIER:param                                    {: RESULT = "String " + param; :}
;

parameter_call          ::= STRING_LITERAL:str                                    {: RESULT = str; :}

                        | IDENTIFIER:func_id LPAREN statements:st RPAREN        {: RESULT = func_id + "("+ st +")"; :}
                        | IDENTIFIER:func_id LPAREN RPAREN        {: RESULT = func_id + "()"; :}
;

func_body               ::= statements:stmts                                    {: RESULT = "\t\t" + stmts; :}
                        | /* Empty */                                           {: RESULT = ""; :}
;

statements              ::= IF LPAREN expression:expr RPAREN statements:stmt1 ELSE statements:stmt2
                                                                                {: RESULT = "if (" + expr + ") { " + stmt1 + "}" + " else { " + stmt2 + " }";:}
                        | expression:expr                                       {: RESULT = "return " + expr + ";"; :}
;

expression              ::= IDENTIFIER:idntf rest_idntf:id_r                    {: RESULT = idntf + "" + id_r; :}
                        | STRING_LITERAL:str                                    {: RESULT = str; :}
                        | expression:expr1 EQUALS expression:expr2              {: RESULT = expr1 + ".equals("+expr2+")"; :}
                        | expression:expr1 IN expression:expr2                  {: RESULT = expr2 + ".contains("+expr1+")"; :}
                        | expression:expr1 PLUS expression:expr2                {: RESULT = expr1 +" + "+ expr2; :}
;

/* IN BODY FUNCTION CALLS */
rest_idntf              ::= LPAREN func_param_list_inner:parlist RPAREN         {: RESULT = "(" + parlist + ")"; :}
                        | LPAREN RPAREN                                         {: RESULT = "()"; :}
                        |                                                       {: RESULT = ""; :}
;

func_param_list_inner   ::= parameter_inner:par                                 {: RESULT = par; :}
                        | func_param_list_inner:parlist COMMA parameter_inner:par{: RESULT = parlist + ", " + par; :}
;

parameter_inner         ::= expression:stmt                                       {: RESULT = stmt; :}
                        // | func_call:fc                                    {: RESULT = fc; :}
;
