/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal    SEMI, PLUS, MINUS, TIMES, UMINUS, LPAREN, RPAREN, LCURLYBRACKET, RCURLYBRACKET, COMMA, IDENTIFIER1, IDENTIFIER2, NUMBER;


/*  Non terminals */
non terminal    prog, functions_declarations, function_declare, function_stmts, function_statements, function_block, statement, functions_calls, function_call, function_args, function_arguments, function_argument;

/**
 *  Precedence Declarations
 */
/*precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;*/


/**
 *  The Grammar Rules
 */
prog                    ::= functions_declarations:fd  {: System.out.println("prog");:}
                            
;

functions_declarations  ::= function_declare:decl functions_declarations:fd  {: System.out.println(decl);:}
                        | functions_calls
;

function_declare        ::= IDENTIFIER1:function_id function_stmts function_block {: System.out.println(function_id);:}
;

function_stmts          ::= LPAREN function_statements RPAREN
                         /* Empty */
;

function_statements     ::= statement                                {: System.out.println("fun_stmts");:}
                        | function_statements COMMA statement        {: System.out.println("fun_stmts");:}
                        | /* Empty */
;

statement               ::= IDENTIFIER1:st                             {: System.out.println(st);:}
;

function_block          ::= LCURLYBRACKET RCURLYBRACKET            {: System.out.println("fun_block");:}
;

functions_calls         ::= function_call functions_calls          {: System.out.println("fun_calls");:}
                        
;

function_call           ::= IDENTIFIER2:function_id function_args {: System.out.println(function_id);:}
                        
;

function_args           ::= LPAREN function_arguments RPAREN
                       
                         /* Empty */
;

function_arguments      ::= function_argument  {: System.out.println("fun_arguments");:}
                        | function_arguments COMMA function_argument  {: System.out.println("fun_arguments");:}
                        | /* Empty */
;

function_argument       ::= IDENTIFIER2:st                             {: System.out.println(st);:}
;
