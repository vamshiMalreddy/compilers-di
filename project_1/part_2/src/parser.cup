/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal    SEMI, PLUS, MINUS, TIMES, UMINUS, LPAREN, RPAREN, LCURLYBRACKET, RCURLYBRACKET, COMMA, IDENTIFIER, STRING_LITERAL, NUMBER;


/*  Non terminals */
non terminal    program, functions_declarations, function_declare;
non terminal    function_name, function_param_list, function_block;
non terminal    parameter, functions_calls, function_call;
non terminal    function_arguments, function_argument;
non terminal    body_function, statements, statement;
non terminal    expression;

/**
 *  Precedence Declarations
 */
precedence left PLUS;

/**
 *  The Grammar Rules
 */
program                 ::= functions_declarations:fd {: System.out.println("}"); :}
;

functions_declarations  ::= function_declare:decl functions_declarations:fd    {: System.out.println(decl); :}
                        | functions_calls:fc                                   {: System.out.println("public class Main {\n\tpublic static void main(String[] args) {\n" + fc + "\t}"); :}
;

functions_calls         ::= function_call:call functions_calls:fc              {: RESULT = call + "\n" + fc ;:}
                        |                                                      {: RESULT = "";:}
;

function_declare        ::= IDENTIFIER:function_id LPAREN function_param_list:pr RPAREN LCURLYBRACKET body_function:body RCURLYBRACKET   
                                                                               {: RESULT = "\n\tpublic static String " + function_id + " (" + pr + ") {\n" + body + "\n\t}"; :}
;

function_call           ::= IDENTIFIER:function_id LPAREN function_param_list:parlist RPAREN    
                                                                               {: RESULT = "\t\tSystem.out.println(" + function_id + "(" + parlist + "));"; :}     
;

function_param_list     ::= parameter:par                                      {: RESULT = par; :}
                        | function_param_list:parlist COMMA parameter:par      {: RESULT = parlist + ", " + par; :}
                        | /* Empty */                                          {: RESULT = ""; :}
;

parameter               ::= IDENTIFIER:param                                   {: RESULT = "String " + param; :}
                        | STRING_LITERAL:str                                   {: RESULT = str; :}
;

body_function           ::= statements:stmts                                   {: RESULT = "\t\t" + stmts; :}
                        |                                                      {: RESULT = ""; :}
;

statements              ::= expression:expr                                    {: RESULT = "return " + expr + ";"; :}
                        
;

expression              ::= IDENTIFIER:idntf                                   {: RESULT = idntf; :}
                        | STRING_LITERAL:str                                   {: RESULT = str; :}
                        | expression:expr1 PLUS expression:expr2               {: RESULT = expr1 +"+"+ expr2; :}                                                                   
;
