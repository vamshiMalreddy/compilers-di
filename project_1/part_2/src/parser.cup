/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal    SEMI, PLUS, MINUS, TIMES, UMINUS, LPAREN, RPAREN, LCURLYBRACKET, RCURLYBRACKET, COMMA, IDENTIFIER, STRING_LITERAL, NUMBER;


/*  Non terminals */
non terminal    program, functions_declarations, function_declare;
non terminal    function_name, function_param_list, function_block;
non terminal    parameter, functions_calls, function_call;
non terminal    function_arguments, function_argument;
non terminal    body_function, statements, statement;
non terminal    expression;

/**
 *  Precedence Declarations
 */
precedence left PLUS;

/**
 *  The Grammar Rules
 */
program                 ::= functions_declarations {: System.out.println("program");:}
;

functions_declarations  ::= function_declare functions_declarations  {: System.out.println("functions_declarations");:}
                        | functions_calls
;

functions_calls         ::= function_call functions_calls             {: System.out.println("fun_calls");:}
                        |
;

function_declare        ::= IDENTIFIER:function_id LPAREN function_param_list RPAREN LCURLYBRACKET body_function RCURLYBRACKET {: System.out.println("IDENTIFIER "+function_id);:}
;

function_call           ::= IDENTIFIER:function_id LPAREN function_param_list RPAREN {: System.out.println("IDENTIFIER "+function_id);:}     
;

function_param_list     ::= parameter                                {: System.out.println("parameter");:}
                        | function_param_list COMMA parameter        {: System.out.println("fun_params");:}
                        | /* Empty */
;

parameter               ::= IDENTIFIER:param                         {: System.out.println("IDENTIFIER "+param);:}
                        | STRING_LITERAL:str                       {: System.out.println("STRING_LITERAL "+str);:}
;

body_function           ::= statements      
;

statements              ::= expression
                        
;

expression              ::= IDENTIFIER:idntf                         {: System.out.println("return IDENTIFIER "+idntf);:}
                        | STRING_LITERAL:str                         {: System.out.println("return STR "+str);:}
                        | expression PLUS expression                 {: System.out.println("concat");:}
                        |
;
